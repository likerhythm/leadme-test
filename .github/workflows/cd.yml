name: DEV_CI/CD

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: gradlew 실행 권한 부여 
        run: chmod +x gradlew

      - name: 스프링 빌드 .jar 파일 생성
        run: ./gradlew clean build

      - name: 빌드 산출물 확인
        run: ls -alR **/build/libs || true   # 전 모듈 검색

      - name: Debug SSH Key
        run: echo "${{ secrets.DEV_SSH_KEY }}" | wc -l

      - name: EC2 기존 app 폴더 초기화
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            rm -rf ~/app

      - name: EC2에 libs 폴더 생성
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            mkdir -p ~/app/libs

      - name: EC2에 log 디렉토리 생성
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            mkdir -p ~/app/logs

      - name: 빈 로그 파일 생성
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            touch ~/app/logs/app.log
            echo "$(date '+%Y-%m-%d %H:%M:%S') - Initial log created by CI/CD" > ~/app/logs/app.log

      - name: 빌드된 JAR 파일 EC2로 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_SSH_KEY }}
          source: "build/libs/*.jar"
          target: "~/app/libs"

      - name: 디버깅 - 현재 디렉토리 파일 목록 보기
        run: ls -al

      - name: Dockerfile 및 docker-compose.yml EC2로 전송
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_SSH_KEY }}
          source: |
            ./Dockerfile
            ./docker-compose.yml
          target: "~/app"

      - name: .env 값 주입후, docker-compose 실행
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEV_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.DEV_SSH_KEY }}
          script: |
            cd ~/app
            echo "DB_URL=${{ secrets.DB_URL }}" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "SERVER_PORT=${{ secrets.DEV_SERVER_PORT }}" >> .env

            docker-compose --env-file .env -f docker-compose.yml down -v
            docker image prune -f
            docker-compose --env-file .env -f docker-compose.yml up -d --build
